// 配列と番兵を用いた線形探索
procedure search_array_sentinel_landauer(int k[], int key, int n, int f, stack g)
  push(k[n], g)
  k[n] ^= key
  local int i = 0
    push(1, g)
    from top(g) = 1 do
      i += 1
      push(0, g)
    until k[i] = key
  
    if i < n then
      push(f, g)
      f ^= 1
      push(1, g)
    else
      push(0, g)
    fi top(g) = 1
  
    push(i, g)
  delocal int i = 0
  k[n] ^= key

procedure banpei2(int k[], int key, int n, int f)
  local stack g = nil
    local int ff = 0
      call search_array_sentinel_landauer(k, key, n, ff, g)
      f ^= ff
      uncall search_array_sentinel_landauer(k, key, n, ff, g)
    delocal int ff = 0
  delocal stack g = nil

procedure main()
  int key
  int n
  int k[11] = {10, 4, 3, 2, 9, 6, 7, 8, 5, 1}
  int f
  n ^= 10

  key ^= 9
  call banpei2(k,key,n,f)
  printf("The result is %d (0 => not found, 1 => found)", f)
  f ^= 1 // zero clear
  key ^= 9

  key ^= 99
  call banpei2(k,key,n,f)
  printf("The result is %d (0 => not found, 1 => found)", f)
